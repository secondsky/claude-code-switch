#!/usr/bin/env bash
set -euo pipefail

# Claude Code Commander (ccc)
# Repo-local launcher: switch model via ccm.sh and then exec `claude`
# This affects only the spawned `claude` process, not your parent shell.

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]:-$0}")" && pwd)"
CCM_CMD_DEFAULT="$SCRIPT_DIR/ccm.sh"
CCM="${CCM_CMD:-$CCM_CMD_DEFAULT}"

usage() {
    cat <<EOF
Usage: ./ccc <model> [claude-options] [yolo]
       ./ccc <account> [claude-options] [yolo]  # Switch account then launch (default model)
       ./ccc <model>:<account> [claude-options] [yolo]
       ./ccc pp <model> [claude-options] [yolo]

Examples:
  ./ccc deepseek                     # Launch Claude Code with DeepSeek
  ./ccc pp glm                       # Launch with PPINFRA GLM
  ./ccc kimi --dangerously-skip-permissions  # Pass options to Claude Code
  ./ccc woohelps                     # Switch to 'woohelps' account and launch
  ./ccc opus:work                    # Switch to 'work' account and use Opus
  ./ccc deepseek yolo                # Launch DeepSeek with --dangerously-skip-permissions
  ./ccc pp glm yolo                  # Launch PPINFRA GLM with --dangerously-skip-permissions

Available models:
  Official: deepseek, glm, kimi, qwen, claude, opus, haiku, longcat
  PPINFRA:  pp deepseek | pp glm | pp kimi | pp qwen
  Account:  <account> | claude:<account> | opus:<account> | haiku:<account>
EOF
}

if [[ ! -f "$CCM" ]]; then
    echo "ccc error: cannot find ccm CLI at $CCM" >&2
    echo "Hint: ensure ccm.sh exists next to this script, or set CCM_CMD=/path/to/ccm.sh" >&2
    exit 1
fi

if [[ $# -lt 1 ]]; then
    usage
    exit 1
fi

use_pp=false
model=""

if [[ "${1:-}" == "pp" ]]; then
    use_pp=true
    shift || true
fi

if [[ $# -lt 1 ]]; then
    usage
    exit 1
fi

model="$1"
shift || true

# Check for yolo mode and clean up arguments
yolo_mode=false
filtered_args=()

for arg in "$@"; do
    if [[ "$arg" == "yolo" ]]; then
        yolo_mode=true
    else
        filtered_args+=("$arg")
    fi
done

# Update arguments (without yolo)
set -- "${filtered_args[@]}"

# Remaining args are passed through to `claude`
claude_args=("$@")

# If yolo mode is enabled, add the dangerous permissions flag
if $yolo_mode; then
    claude_args+=("--dangerously-skip-permissions")
fi

# Helper: is known model keyword
is_known_model() {
    case "$1" in
        deepseek|ds|glm|glm4|glm4.6|kimi|kimi2|qwen|longcat|lc|minimax|mm|claude|sonnet|s|opus|o|haiku|h)
            return 0 ;;
        *)
            return 1 ;;
    esac
}

# Account-only mode: `ccc <account>` (not pp, not known model, no colon)
if ! $use_pp && [[ "$model" != *:* ]] && ! is_known_model "$model" && [[ ! "$model" =~ ^- ]]; then
    account="$model"
    # 1) Switch account directly (no eval)
    if ! "$CCM" switch-account "$account"; then
        echo "❌ Failed to switch account: $account" >&2
        exit 1
    fi
    # Show current account summary (non-fatal if it fails)
    "$CCM" current-account || true
    # 2) Optionally set default model environment (Claude Sonnet)
    eval "$("$CCM" claude)"
else
    # Configure environment for this process using repo-local ccm
    if $use_pp; then
        # pass no_color=true so status messages go to stderr and exports are clean on stdout
        eval "$("$CCM" pp "$model" true)"
    else
        eval "$("$CCM" "$model")"
    fi
fi

# Friendly status
echo ""
echo "🚀 Launching Claude Code..."
echo "   Model: ${ANTHROPIC_MODEL:-'(unset)'}"
echo "   Base URL: ${ANTHROPIC_BASE_URL:-'Default (Anthropic)'}"

# Ensure `claude` is available
if ! command -v claude >/dev/null 2>&1; then
    echo "❌ 'claude' CLI not found. Install it first: npm install -g @anthropic-ai/claude-code" >&2
    exit 127
fi

# Exec into Claude Code with the configured environment
echo "   Flags: ${claude_args[*]:-(none)}${yolo_mode:+ (yolo mode enabled)}"

if [[ ${#claude_args[@]} -eq 0 ]]; then
    exec claude
else
    exec claude "${claude_args[@]}"
fi